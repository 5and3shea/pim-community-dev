{% extends 'PimEnrichBundle::layout.html.twig' %}
{% import 'PimDataGridBundle::macros.html.twig' as dataGrid %}
{% import 'PimUIBundle::macros.html.twig' as UI %}

{% oro_title_set({params : { "%role%": form.vars.value.label } }) %}

{% block head_script %}
    {{ parent() }}
    <script type="text/javascript">
        require(
            ['jquery'],
            function ($) {
                'use strict';

                $(function() {
                    var decorateTabs = function() {
                        $('.AknVerticalNavtab').find('.AknVerticalNavtab-link').each(function() {
                            var $target = $($(this).attr('href'));
                            var hasGranted = $target.find('.acl-permission:not(.default-field) .acl-permission-toggle.granted').length;
                            var hasNonGranted = $target.find('.acl-permission:not(.default-field) .acl-permission-toggle.non-granted').length;
                            var iconClass = 'icon-circle';
                            if (hasGranted && !hasNonGranted) {
                                iconClass = 'AknAcl-icon--granted icon-ok';
                            }
                            if (hasNonGranted && !hasGranted) {
                                iconClass = 'AknAcl-icon--nonGranted icon-remove';
                            }
                            var $icon = $(this).find('i').first();
                            $icon.removeClass('icon-ok icon-remove icon-circle AknAcl-icon--granted AknAcl-icon--nonGranted').addClass(iconClass);
                        });
                    };

                    var togglePermission = function($icon, callback) {
                        if ($icon.parent().hasClass('default-field-toggle')) {
                            var permission = $icon.parent().data('permission');
                            var $defaultIcon = $('.default-field[data-permission="' + permission + '"]').find('.' + ($icon.hasClass('granted') ? 'granted' : 'non-granted'));
                            $defaultIcon.toggleClass('icon-ok granted').toggleClass('icon-remove non-granted');
                            var $defaultInput = $defaultIcon.siblings('input[type="checkbox"]').eq(0);
                            $defaultInput.prop('checked', !$defaultInput.is(':checked'));
                        }
                        var iconClass = 'AknAcl-icon--granted icon-ok granted';
                        if ($icon.hasClass('granted')) {
                            iconClass = 'AknAcl-icon--nonGranted icon-remove non-granted';
                        }
                        $icon.removeClass('icon-ok icon-remove icon-circle AknAcl-icon--granted AknAcl-icon--nonGranted granted non-granted').addClass(iconClass);
                        var $input = $icon.siblings('input[type="checkbox"]').eq(0);
                        $input.prop('checked', !$input.is(':checked')).trigger('change');
                        (callback || $.noop)();
                    };

                    $('.acl-permission .acl-permission-toggle').on('click', function() {
                        togglePermission($(this), decorateTabs)
                    });

                    $('.AknVerticalNavtab').on('click', '.acl-group-permission-toggle', function() {
                        var classToToggle = $(this).hasClass('icon-ok') ? 'granted' : 'non-granted';
                        var $target = $($(this).closest('.AknVerticalNavtab-link').attr('href'));
                        $target.find('.acl-permission:not(.default-field) a.' + classToToggle).each(function() {
                            togglePermission($(this));
                        });
                        decorateTabs();
                    });

                    decorateTabs();
                });
            }
        );
    </script>
{% endblock %}

{% set entityId = form.vars.value.id %}

{% block content %}
    {% raw %}
        <script type="text/javascript">
            require(['jquery', 'oro/translator', 'bootstrap'],
                function ($, __) {

                    var jsfv = new function () {
                        function getComputeMessage(key, placeholders, number) {

                            var result = __(key, placeholders, number);
                            if (undefined == result && number != undefined) {
                                // Try to get translated string without a number parameter.
                                result = __(key, placeholders);
                            }

                            return result;
                        }

                        function isNotDefined(value) {
                            return (typeof value === 'undefined' || null === value || '' === value);
                        }

                        function showErrorsOnGroups() {
                            var $groups = $('div.tab-groups ul');
                            if (!$groups.length) {
                                return;
                            }

                            var $error = $('<i class="AknIconButton AknIconButton--important icon-warning-sign validation-tooltip" data-placement="right" data-toggle="tooltip" data-original-title="There\x20are\x20errors\x20in\x20this\x20tab\x21"></i>');

                            $groups.find('a').each(
                                function () {
                                    var target = $(this).attr('href');
                                    if (!target || target == '#' || target == 'javascript:void(0);') {
                                        return;
                                    }

                                    if ($(target).find('.validation-tooltip').length) {
                                        if (!$(this).find('.validation-tooltip').length) {
                                            $(this).append($error.tooltip());
                                        }
                                    } else {
                                        $(this).find('.validation-tooltip').remove();
                                    }
                                }
                            )
                        }

                        function highlightTabsWithErrors() {
                            var $tabs = $('#form-navbar ul.nav');
                            if (!$tabs.length) {
                                return;
                            }

                            $tabs.find('a').each(
                                function () {
                                    var target = $(this).attr('href');
                                    if (!target || target == '#' || target == 'javascript:void(0);') {
                                        return;
                                    }

                                    if ($(target).find('.validation-tooltip').length) {
                                        $(this).addClass('AknHorizontalNavtab-link--errored error');
                                    } else {
                                        $(this).removeClass('AknHorizontalNavtab-link--errored error');
                                    }
                                }
                            )
                        }

                        function showFirstTabWithErrors() {
                            $errors = $('.validation-tooltip');
                            if (!$errors.length || $errors.filter(':visible').length) {
                                return;
                            }

                            $error = $errors.first();
                            $('a[href="#' + $error.closest('.tab-pane').attr('id') + '"]').click();
                        }

                        function getFieldValue(field) {
                            if (!field || !field.nodeName) {
                                return undefined;
                            }

                            var resolveField = function (field) {
                                if (-1 != $.inArray(field.nodeName.toLowerCase(), ['input', 'select', 'textarea'])) {
                                    return $(field);
                                }
                                var select = $('select', field);
                                if (select.length) {
                                    return select;
                                }
                                var input = $('input', field);
                                if (input.length) {
                                    if (!input.filter('[type=checkbox]') && !input.filter('[type=radio]')) {
                                        return input.first();
                                    }
                                    return input;
                                }
                                var textarea = $('textarea', field);
                                if (textarea.length) {
                                    return textarea.get(0);
                                }
                                return undefined;
                            }

                            var $field = resolveField(field);
                            var isMultiple = $field.length > 1 || $field.filter('select[multiple=multiple]').length;
                            var value = undefined;

                            if ($field.filter('input[type="checkbox"]').length) {
                                value = $field.is(':checked');
                            } else if ($field.filter('input[type="radio"]').length) {
                                value = $field.filter(':checked').val();
                            } else {
                                value = $field.val();
                            }

                            if (!isMultiple && value instanceof Array) {
                                value = value.pop();
                            } else if (isMultiple && !value instanceof Array) {
                                if (value && value != '') {
                                    value = [value];
                                } else {
                                    value = [];
                                }
                            }

                            return value;
                        }

                        function checkError(field, checkFunction, parameters, value) {
                            field = jsfv.id(field);
                            // Remove old errors of the field
                            jsfv.removeErrors(field);        // Check the value
                            errorMessage = checkFunction((value === undefined ? getFieldValue(field) : value), parameters);
                            /*//  */

                            if (errorMessage != true) {
                                jsfv.addError(field, errorMessage);
                                highlightTabsWithErrors();
                                showErrorsOnGroups();

                                return false;
                            }
                            highlightTabsWithErrors();
                            showErrorsOnGroups();

                            return true;
                        }


                        function NotBlank(field, params) {
                            var value = field && field.nodeName ? $(field).val() : field;

                            if (isNotDefined(value)) {
                                return getComputeMessage(params.message);
                            }

                            return true;
                        }

                        function Length(field, params) {
                            var value = field && field.nodeName ? $(field).val() : field;

                            if (isNotDefined(value)) {
                                return true;
                            }

                            value = String(value);

                            if (params['exactMessage'] !== undefined &&
                                params['min'] !== undefined && params['max'] !== undefined &&
                                params.min == params.max) {
                                if (value.length != parseInt(params.min)) {
                                    return getComputeMessage(params.exactMessage, {'limit': params.min}, params.min);
                                }
                            } else {
                                if (params['min'] !== undefined && value.length < parseInt(params.min)) {
                                    return getComputeMessage(params.minMessage, {'limit': params.min}, params.min);
                                }
                                if (params['max'] !== undefined && value.length > parseInt(params.max)) {
                                    return getComputeMessage(params.maxMessage, {'limit': params.max}, params.max);
                                }
                            }

                            return true;
                        }


                        /**
                         * @author   Vitaliy Demidov   <zend@i.ua>
                         */
                        function UniqueEntity(field, params) {
                            var value = field && field.nodeName ? $(field).val() : field;
                            var cache, url, cacheindex = 'm' + value + '';
                            if (params && params.fields && field.nodeName) {
                                //TODO This part is compartible only with jquery
                                cache = $(field).data('_uniqueEntityCache');
                                if (!cache) cache = {};
                                if (cache[cacheindex] != undefined) {
                                    if (cache[cacheindex] === false) {
                                        return getComputeMessage(params.message);
                                    } else return true;
                                }
                                $.ajax({
                                    type: 'POST',
                                    url: '\x2Fapp_dev.php\x2Fjsfv\x2Funique\x2Dentity.en_US',
                                    data: {
                                        'entity': params.entity,
                                        'target': params.fields,
                                        'value': value,
                                        'ignore': params.identifier_field_id ? self.id(params.identifier_field_id).value : ''
                                    },
                                    success: function (data, textStatus) {
                                        if (data.status && data.status == 'ok') {
                                            cache[cacheindex] = data.isUnique;
                                            $(field).data('_uniqueEntityCache', cache);
                                            if (!cache[cacheindex]) {
                                                checkError($(field).attr('id'), UniqueEntity, params);
                                            }
                                        }
                                    },
                                    dataType: 'json'
                                });
                            }
                            return true;
                        }


                        return {
                            id: function (id) {
                                return document.getElementById(id) || document.getElementById(id + '_data');
                            },
                            removeErrors: function (field) {
                                $(field).removeClass('error').parent().filter('.controls').removeClass('validation-error');
                                if ($(field).siblings('.icons-container').length) {
                                    $(field).siblings('.icons-container').find('.validation-tooltip').remove();
                                } else {
                                    $(field).closest('.controls').find('.icons-container').find('.validation-tooltip').remove();
                                }
                            },
                            addError: function (field, errorMessage) {
                                // Add errors block
                                var $field = $(field);
                                var $iconContainer = $field.siblings('.icons-container').first();
                                if (!$iconContainer.length) {
                                    $iconContainer = $field.closest('.controls').find('.icons-container').first();
                                }
                                if ($iconContainer.find('.validation-tooltip').length === 0) {
                                    $('<i class="AknIconButton AknIconButton--important icon-warning-sign validation-tooltip" data-placement="right" data-toggle="tooltip"></i>').appendTo($iconContainer);
                                }
                                $iconContainer.find('.validation-tooltip').attr('data-original-title', errorMessage).tooltip();
                                $field.addClass('error').closest('.controls').addClass('validation-error');
                            },
                            onEvent: function (field, eventType, handler) {
                                if (typeof field === 'string') {
                                    field = jsfv.id(field);
                                }
                                $(field).bind(eventType, handler);
                            },
                            onFirstEvent: function (field, eventType, handler) {
                                if (typeof field === 'string') {
                                    field = jsfv.id(field);
                                }
                                $(field).bind(eventType, handler);
                            },
                            check_oro_user_role_form_label: function () {
                                var gv;
                                result = true;
                                result = result && checkError('oro_user_role_form_label', NotBlank, {
                                    message: "This value should not be blank.",
                                    payload: null
                                });
                                result = result && checkError('oro_user_role_form_label', Length, {
                                    maxMessage: "This value is too long. It should have {{ limit }} character or less.|This value is too long. It should have {{ limit }} characters or less.",
                                    minMessage: "This value is too short. It should have {{ limit }} character or more.|This value is too short. It should have {{ limit }} characters or more.",
                                    exactMessage: "This value should have exactly {{ limit }} character.|This value should have exactly {{ limit }} characters.",
                                    charsetMessage: "This value does not match the expected {{ charset }} charset.",
                                    max: 25,
                                    min: null,
                                    charset: "UTF-8",
                                    payload: null
                                });
                                result = result && checkError('oro_user_role_form_label', UniqueEntity, {
                                    message: "This value is already used.",
                                    service: "doctrine.orm.validator.unique",
                                    em: null,
                                    repositoryMethod: "findBy",
                                    fields: "label",
                                    errorPath: null,
                                    ignoreNull: true,
                                    payload: null
                                });
                                return result;
                            },
                            onReady: function () {
                                // On submit checks
                                var form = jsfv.id('oro_user_role_form');

                                // Form exists ?
                                if (form) {
                                    // Get the form
                                    if (form.nodeName.toLowerCase() != 'form') {
                                        form = jsfv.id('oro_user_role_form__token').form;
                                    }

                                    // Remove HTML5 validation
                                    $(form).attr('novalidate', 'novalidate');
                                    highlightTabsWithErrors();
                                    showErrorsOnGroups();

                                    jsfv.onFirstEvent(form, 'submit', function (e) {
                                        var gv, submitForm = true;
                                        submitForm = jsfv.check_oro_user_role_form_label() && submitForm;
                                        if (!submitForm) {
                                            e.stopImmediatePropagation();
                                            showFirstTabWithErrors();
                                            $(form).trigger('validate');
                                        }
                                        return submitForm;
                                    });
                                }


                                // On change checks
                                jsfv.onEvent('oro_user_role_form_label', 'change', jsfv.check_oro_user_role_form_label);
                            }
                        };
                    }

                    $(jsfv.onReady);
                }
            );
        </script>
    {% endraw %}

    {{ form_start(form, {
        'action': entityId ? path('oro_user_role_update', { 'id': entityId}) : path('oro_user_role_create'),
        'attr': {
            'class': 'form-tabbed',
            'data-updated-title': 'confirmation.leave'|trans,
            'data-updated-message': 'confirmation.discard changes'|trans({ '%entity%': 'role.title'|trans })
        }
    }) }}

        {% set title = entityId ? 'role.edit'|trans ~ ' - ' ~ form.vars.value.label : 'role.create'|trans %}

        {% set titleButtons %}
            {{ elements.backLink(path('oro_user_role_index')) }}
        {% endset %}

        {% set buttons %}
            {% if entityId %}
                {{ elements.deleteLink(
                    path('oro_user_role_delete', { id: entityId }),
                    'pim_user_role_remove',
                    path('oro_user_role_index'),
                    'Are you sure you want to delete this role?'|trans,
                    'Role removed'|trans,
                    '',
                    'AknButtonList-item'
                ) }}
            {% endif %}
            {{ elements.submitBtn('', 'ok', 'AknButtonList-item') }}
        {% endset %}

        {{ elements.page_header(title, buttons, null, null, null, titleButtons, elements.updated(form.vars.id)) }}

        {% set tabs = ['General'] %}
        {% for item in privilegesConfig|keys %}
            {% set tabs = tabs|merge(['rights.' ~ item]) %}
        {% endfor %}
        {% set tabs = tabs|merge(['Users']) %}

        <div class="AknTabContainer">
            {{ elements.form_navbar(tabs, '') }}
            <div class="tab-content oro-tab-form">

                {{ elements.form_errors(form) }}

                <div class="tab-pane active" id="general">
                    <div class="tabsections">
                        <div class="tabsection">
                            <div class="AknTabContainer-content tabsection-content">
                                <div class="AknFormContainer AknFormContainer--withPadding">
                                    {{ form_row(form.label) }}
                                    {% if form.owner is defined %}
                                        {{ form_row(form.owner, {attr : { class: 'hide' }}) }}
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                {% set groups = acl_groups() %}
                {% set groupNames = acl_group_names() %}

                {% for privilegeBlock, privilegeConfig in privilegesConfig %}
                    {% if groups[privilegeBlock] is defined %}
                        <div class="tab-pane" id="rights-{{ privilegeBlock }}">
                        <div class="tabs-left">
                            {% if 'groups' == privilegeConfig.view_type %}
                                <ul class="AknVerticalNavtab AknVerticalNavtab--condensed nav nav-list">
                                    <li class="AknVerticalNavtab-item AknVerticalNavtab-header"></li>
                                    {% for group in groups[privilegeBlock] %}
                                        <li class="AknVerticalNavtab-item tab{{ loop.index == 1 ? ' active' : '' }}">
                                            <a class="AknVerticalNavtab-link" href="#tabs-{{ group.name|replace({' ': '-', '.': '-'})|lower }}" data-toggle="tab">
                                                <span class="AknAcl">
                                                    <i class="AknAcl-icon acl-group-permission-toggle"></i>
                                                    <span>{{ group.name|trans }}</span>
                                                </span>
                                            </a>
                                        </li>
                                    {% endfor %}
                                    {% for child in form[privilegeBlock].children|reverse if child.vars.value.group not in groups[privilegeBlock] and child.vars.value.extensionKey == 'entity' and child.vars.value.identity.name != '(default)' %}
                                        {% set groupName = 'oro_security.acl_group.' ~ child.vars.value.identity.name|lower %}
                                        <li class="AknVerticalNavtab-item tab">
                                            <a class="AknVerticalNavtab-link" href="#tabs-{{ groupName|replace({' ': '-', '.': '-'}) }}" data-toggle="tab">
                                                <span class="AknAcl">
                                                    <i class="AknAcl-icon acl-group-permission-toggle"></i>
                                                    <span>{{ groupName|trans }}</span>
                                                </span>
                                            </a>
                                        </li>
                                    {% endfor %}
                                    {% if 'action' == privilegeBlock %}
                                        <li class="AknVerticalNavtab-item tab">
                                            <a class="AknVerticalNavtab-link" href="#tabs-group-system" data-toggle="tab">
                                                <span class="AknAcl">
                                                    <i class="AknAcl-icon acl-group-permission-toggle"></i>
                                                    <span>{{ 'System'|trans }}</span>
                                                </span>
                                            </a>
                                        </li>
                                    {% endif %}
                                </ul>
                                <div class="AknTabContainer-content tab-content">
                                    {% for group in groups[privilegeBlock] %}
                                        <div id="tabs-{{ group.name|replace({' ': '-', '.': '-'})|lower }}" class="tab-pane fullheight">
                                            <div class="AknTabHeader">
                                                <h3 class="AknTabHeader-title">{{ group.name|trans }}</h3>
                                            </div>
                                            <div class="AknFormContainer AknFormContainer--withPadding acl-group">
                                                {% for child in form[privilegeBlock].children if child.vars.value.group == group.name %}
                                                    {{ form_widget(child) }}
                                                {% endfor %}
                                            </div>
                                        </div>
                                    {% endfor %}
                                    {% for child in form[privilegeBlock].children if child.vars.value.group not in groups and child.vars.value.extensionKey == 'entity' and child.vars.value.identity.name != '(default)' %}
                                        {% set groupName = 'oro_security.acl_group.' ~ child.vars.value.identity.name|lower %}
                                        <div id="tabs-{{ groupName|replace({' ': '-', '.': '-'}) }}" class="tab-pane fullheight">
                                            <div class="AknTabHeader">
                                                <h3 class="AknTabHeader-title">{{ groupName|trans }}</h3>
                                            </div>
                                            <div class="AknFormContainer AknFormContainer--withPadding acl-group">
                                                {{ form_widget(child) }}
                                            </div>
                                        </div>
                                    {% endfor %}
                                    {% if 'action' == privilegeBlock %}
                                        <div id="tabs-group-system" class="tab-pane fullheight">
                                            <div class="AknTabHeader">
                                                <h3 class="AknTabHeader-title">{{ 'System'|trans }}</h3>
                                            </div>
                                            <div class="AknFormContainer AknFormContainer--withPadding acl-group">
                                                {% for child in form[privilegeBlock].children if child.vars.value.group not in groupNames and (child.vars.value.extensionKey != 'entity' or child.vars.value.identity.name == '(default)') %}
                                                    {{ form_widget(child) }}
                                                {% endfor %}
                                            </div>
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        {% else %}
                            {{ form_widget(form[privilegeBlock]) }}
                        {% endif %}
                    </div>
                    {% endif %}
                {% endfor %}

                <div class="AknTabContainer-content tab-pane" id="users">
                    {{ dataGrid.renderGrid('pim-role-user-grid', {role_id: entityId}) }}
                    {{ form_widget(form.appendUsers, {'id': 'roleAppendUsers'}) }}
                    {{ form_widget(form.removeUsers, {'id': 'roleRemoveUsers'}) }}
                </div>
            </div>
        </div>

    {{ form_end(form) }}
{% endblock %}
